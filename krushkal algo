#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure for an edge
struct Edge {
    int src, dest, weight;
    
    // Comparator to sort edges based on their weight
    bool operator<(const Edge& e) {
        return weight < e.weight;
    }
};

// Class to represent a Disjoint Set (Union-Find) data structure
class DisjointSet {
public:
    vector<int> parent, rank;
    
    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i; // Initialize parent of each node to itself
        }
    }
    
    // Find operation with path compression
    int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]); // Path compression
        }
        return parent[u];
    }
    
    // Union operation by rank
    void unionSet(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);
        
        if (rootU != rootV) {
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Kruskal's Algorithm to find the MST
vector<Edge> kruskal(int V, vector<Edge>& edges) {
    sort(edges.begin(), edges.end()); // Step 1: Sort all edges by weight
    
    DisjointSet ds(V);  // Create disjoint set for V vertices
    vector<Edge> mst;    // To store the result MST
    
    // Step 2: Process each edge
    for (auto& edge : edges) {
        int u = edge.src;
        int v = edge.dest;
        
        // Step 3: If u and v are in different sets, include this edge in MST
        if (ds.find(u) != ds.find(v)) {
            ds.unionSet(u, v);
            mst.push_back(edge);  // Add edge to the MST
        }
    }
    
    return mst;
}

int main() {
    // Number of nodes (vertices)
    int V = 6;  // Example: 6 supply chain points (factories, warehouses, etc.)
    
    // List of edges (src, dest, weight)
    vector<Edge> edges = {
        {0, 1, 4}, {0, 2, 4},
        {1, 2, 2}, {1, 3, 5},
        {2, 3, 3}, {2, 4, 6},
        {3, 4, 2}, {3, 5, 7},
        {4, 5, 3}
    };
    
    // Get the Minimum Spanning Tree
    vector<Edge> mst = kruskal(V, edges);
    
    // Print the MST edges
    cout << "Minimum Spanning Tree (MST) for Supply Chain Optimization:\n";
    int totalWeight = 0;
    for (auto& edge : mst) {
        cout << "Edge (" << edge.src << " -> " << edge.dest << ") with weight: " << edge.weight << endl;
        totalWeight += edge.weight;
    }
    
    // Print total weight of the MST
    cout << "Total cost of the supply chain network: " << totalWeight << endl;
    
    return 0;
}
