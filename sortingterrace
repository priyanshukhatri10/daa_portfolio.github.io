#include <iostream>
using namespace std;

struct Area {
    string name;       
    float soil_quality;
};

// Function to swap two elements in the array
void swap(Area &a, Area &b) {
    Area temp = a;
    a = b;
    b = temp;
}

// Partition function used by Quick Sort
int Partition(Area A[], int l, int r) {
    float p = A[l].soil_quality;  
    int i = l;
    int j = r + 1;

    while (true) {
        // Find an element greater than or equal to pivot (p)
        do {
            i++;
        } while (A[i].soil_quality < p && i <= r);

        // Find an element smaller than or equal to pivot (p)
        do {
            j--;
        } while (A[j].soil_quality > p && j >= l);

        if (i >= j) {
            break;  
        }
        
        // Swap the elements at i and j
        swap(A[i], A[j]);
    }

    // Swap the pivot with the element at j to complete the partition
    swap(A[l], A[j]);
    return j;  
}

// Quick Sort function
void QuickSort(Area A[], int l, int r) {
    if (l < r) {
        // Get the partition index
        int s = Partition(A, l, r);

        // Recursively sort the left and right subarrays
        QuickSort(A, l, s - 1);
        QuickSort(A, s + 1, r);
    }
}

// Function to display the array of areas with soil quality
void DisplayAreas(Area A[], int n) {
    for (int i = 0; i < n; i++) {
        cout << A[i].name << ": " << A[i].soil_quality << endl;
    }
}

int main() {
    
    Area areas[] = {
        {"Area A", 6.5},
        {"Area B", 5.2},
        {"Area C", 7.3},
        {"Area D", 4.8},
        {"Area E", 6.9}
    };

    int n = sizeof(areas) / sizeof(areas[0]);

    cout << "Before Sorting:" << endl;
    DisplayAreas(areas, n);  

    // Apply Quick Sort on the areas based on soil quality
    QuickSort(areas, 0, n - 1);

    cout << "\nAfter Sorting:" << endl;
    DisplayAreas(areas, n);  

    return 0;
}
